Agile building blocks for teams
Bridging between technical and non technical
17 Apr 2015
Tags: Agile,

Matthew Mayer
Senior Consultant, Datapipe
mmayer@datapipe.com
http://dualspark.com
@motoblag

* Slides available on GitHub

https://github.com/matthewkmayer/talks

- the "k" is important in the URL: Look for a bunch of Golang projects and a shameful .NET one.
- *pegas-bridge* directory

* Who am I?

- Jack of all trades
- Written, implemented and maintained microservices in the cloud
- Super keen on agile software development
- DevOps fan

* Target audience

- Agile coaches
- managers of Agile teams
- managers of soon-to-be Agile teams

The talk will be assuming a passing technical familiarity with some tools and concepts.

* Definition

A delivery team consists of a product owner, developers, QA, operations.

Think "Scrum team" or the group of people needed to take a product from concept to delivered software.

* Two

* Part one: high level rehash

* Problem

Delivery team can be hard to convince to do Agile, especially the more technically focused ones.

* What happens

Higher-ups in a company dictate the company is now Agile.

Those who deliver software are often given no guidance, knowledge or support.

* Explaining the benefits

Pro-Agile folks, or just Agile-curious, have knowledge or understanding about how and why Agile practices can make better products.

Explaining the nuts and bolts of how to implement this can be hard.

* Point everyone in the right direction

You're dumped into a situation where a team needs to increase their agility.

Start 'em off right: Agile Manifesto.

.link http://agilemanifesto.org http://agilemanifesto.org

* Disregard current situation and daydream

The team knows where they're at now.

Ask:

- What are our pain points?
- Where do we want to be?

* Disregard current situation and daydream

- For a SaaS company, it may be continuous, automated deployment.
- For an installed product: automatic, twice-a-day updates.

* May need outside POV

* Current location established, destination selected

Have the delivery team brainstorm on how they can get to where they want to be.

Many options will be presented: the team should debate and select the one that looks best.

* Start

This can be difficult: the small step towards increasing agility may meet immediate resistance.

But *start*.

* Example

If there's no centralized build server, members of the team should provision one and the entire team should use it.

* Keep moving forward

However work is organized, sprints, iterations, continuous delivery, time should be allocated to making progress towards the team's goals.

- Made a build server last week?  Ensure the team's projects are running on it automatically.
- Builds running automatically?  How about unit tests?
- Unit tests work, next do integration tests.

Just keep chipping away.

* Reflect

Retrospectives are required: the team should check progress towards their destination.

Course corrections are made easy when performed early.

Ensure the team is seeing benefits to the work done.  If not, ask why, five times.

.link http://en.wikipedia.org/wiki/5_Whys http://en.wikipedia.org/wiki/5_Whys

* Reflecting with five whys

Wikipedia example:

  The vehicle will not start. (the problem)
    Why? The battery is dead. (1st why)
    Why? The alternator is not functioning. (2nd why)
    Why? The alternator belt has broken. (3rd why)
    Why? The alternator belt was well beyond its useful service life and not replaced. (4th why)
    Why? Vehicle was not maintained according to the recommended service schedule. (5th, root cause)

* Reflecting with five whys

Wikipedia example:

  The vehicle will not start. (the problem)
    Why? The battery is dead. (1st why)
    Why? The alternator is not functioning. (2nd why)
    Why? The alternator belt has broken. (3rd why)
    Why? The alternator belt was well beyond its useful service life and not replaced. (4th why)
    Why? Vehicle was not maintained according to the recommended service schedule. (5th, root cause)

Team not seeing benefits example:

  We've put work into being agile, but it's not helping quality.
    Why? - The technical process is streamlined, but there's organizational opposition. (1st)
    Why? - Historically the team has delivered buggy software. (2nd)
    Why? - Releases were big and not well tested. (3rd)
    Why? - Technical issues around testing and releasing being difficult. (4th)
    Why? - Not enough resources being put into it. (5th, root cause)

* When in doubt

The Agile Manifesto will provide guidance...

but the customer is king.  Make sure they are satisfied.

* Accelerate

Once the foundation is set, work towards improving agility will pick up steam.

In our example team, they went from no centralized build server to one that runs builds automatically, runs unit tests and integration tests.

With automated testing in place, parts of the delivery team are freed from manual actions to perform tasks that deliver value to customers.

Think working on more stories, doing more prototyping of ideas and increasing test coverage.

* Don't stop

Keep momentum.

Customers see more, higher-quality features in their product.  Bugs are caught before they reach customers.

But there's more to do.

* Agile Fluency

For more guidance, Agile Fluency can help concentrate effort on where to go next.

.image fluency.png

* Keep reaching for the goals

* Your role in the transformation

- Keep the high altitude view
- Defend the team's progress
- Keep the team empowered

* Let's go deeper.

* Part two: the heart of the matter

* Effective actions for teams

- Slice stories into much smaller stories
- Do painful things often
- Deliver faster
- Get feedback faster
- Limit work in progress
- Don't silo information and knowledge
- Make the tools work for the team

* Slice stories into much smaller stories

Anyone seen a sprint where all dev tasks are in progress until the last day of the sprint, when it's "released" to QA?

How does QA feel about that?  I know how I would feel in those shoes!

* Slicing guidelines

- If a story is going to take more than two days, trim it down.
- Take the simplest thing that could possibly work in tough spots and create a ticket or task to flesh it out.  But deliver the story.

* Slicing resources

.link http://gojko.net/2012/01/23/splitting-user-stories-the-hamburger-method/ Hamburger sizing

.image hamburger_step_4.png

* Slicing resources

Take on tiny technical debt that will be solved in the same sprint or iteration

* Slicing is effective

QA will love having tasks to test throughout the sprint instead of a feast or famine approach.

Customers will quickly get value from the work, instead of holding onto it for a big release.

There will be palpable momentum in the team.

* Slicing story time

(Client side database sharding)

* Do painful things often

We all want to avoid pain.  By doing painful things more often, the rough spots will be identified.

Once identified, they can be addressed.

* Painful releases

If releasing software to customers is painful, find the worst spot and fix it.

Is it a manual process with lots of clicking?  Automate it.

Are releases big and often have bugs?  Go to smaller releases with less changes.

Are parts of the process slow?  How can they be sped up?

* Painful release story time

(Big, mission-critical service called a banana)

* Deliver faster

oh hey, it's devops!

* Deliver faster

Automate, automate, automate.

* Deliver faster story time

(Pushing out bug fixes quickly)

* Get feedback faster

Faster releases means customers see features faster.

- Use direct interaction with customers
- Use indirect measures with metrics

* Limit work in progress

Life is easier with small tasks: they rarely get blocked.

* Don't silo information and knowledge

Pair program.

* Spread knowledge through the team

- Pair devs on tasks they don't know well.
- Pair dev and QA.

* When knowledge is spread, people taking vacation or being unavailable becomes less of an issue.

* Fear of change

- Automation of QA tests can scare QA team members
- Automation of deployment steps can scare operations members
- Pair programming can scare everyone

* A common source of fear

Quite often, people see automation of their daily tasks as a threat to their job stability.

This fear can be assuaged by the fact that...

* There's always work to be done

There's:

- Always more tests to write
- Always process improvements in deployment
- Always more topics to learn

* Make the tools work for the team

Anyone spend more time in their ticket system than doing actual work?  Ever heard a complaint about time spent herding tickets?

Allow the team to switch it up.  Their goal is to deliver value to customers, not provide metrics to the company.

Have the team figure out what fits their needs:

- Separate issue tracking software than parent group
- GitHub issues
- Sticky notes
- 3x5 cards passed between people

* Make the tools work for the team

If the team views the tools are getting in the way of doing work, the problem needs to be fixed.

"The tools work for us, we don't work for the tools."

* <record scratch>

* Remember this slide?

Your role in the transformation

- Keep the high altitude view
- Defend the team's progress
- Keep the team empowered

Switching to a different set of tools may be one of the biggest challenges in keeping the team empowered and making progress.

* Antipatterns

- Siloing of knowledge and power
- Non-technical people making technical decisions
- Poor cross-team communication
- Confusing motion for progress

* Siloing of knowledge and power

If a team isn't empowered to take control and fix something, their agile journey is going to run into a wall sooner rather than later.

* Siloing of knowledge and power

(Story time: "database" team unable to provide latest version of a database)

* Fixing siloing of knowledge and power

- Pair programming across teams
- Ask if help would be nice
- If nothing else, try fixing it and asking for forgiveness

* Non-technical people making technical decisions

Forcing a square peg into a round hole will lower velocity, increase frustration and cause extra work.

* Non-technical people making technical decisions

(Story time: diktat of "NoSQL")

* Fixing non-technical people making technical decisions

Uphill battle, but fight tooth and nail for the right solution.

Back up with data if possible.

* Poor cross-team communication

- Duplication of effort
- No sense of community
- Losing opportunities for collaboration and knowledge sharing

* Poor cross-team communication

(Story time: duplication of effort for how to use a service discovery provider)

* Fixing poor cross-team communication

- Occupy other teams
- Do tours of duties with other teams
- Technological tools: Slack, Hipchat, IRC, etc... Get people talking together

* Confusing motion for progress

Just because people are busy or policies are always changing doesn't mean things are *getting* *done* or getting *better*.

Understand what getting things done means for your group, your company, your customers and align your actions.

* Fixing confusing motion for progress

Look back at what your customers need, align efforts towards that.

* Quick and dirty progress report

Is the team's "Joel score" improving?

* Joel test

.link http://www.joelonsoftware.com/articles/fog0000000043.html http://www.joelonsoftware.com/articles/fog0000000043.html

  Do you use source control?
  Can you make a build in one step?
  Do you make daily builds?
  Do you have a bug database?
  Do you fix bugs before writing new code?
  Do you have an up-to-date schedule?
  Do you have a spec?
  Do programmers have quiet working conditions?
  Do you use the best tools money can buy?
  Do you have testers?
  Do new candidates write code during their interview?
  Do you do hallway usability testing?

* What to do if you're lost

(Story time: asking what a company's SDLC is to their senior developers and technical managers)

* What to do if you're lost

It's okay to be lost!  As long as the next steps involve opening eyes, seeing the environment and starting to make progress, you'll be improving things.

* Take away points

- With the team, determine desired destination and start moving towards it
- Check direction and location regularly to ensure progress
- Empower the delivery team to make the changes they want to
- Encourage everyone involved to keep learning

* Links and resources

.link http://agilemanifesto.org/ http://agilemanifesto.org/
.link https://www.atlassian.com/agile/kanban https://www.atlassian.com/agile/kanban
.link https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/ https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/
.link http://martinfowler.com/articles/agileFluency.html http://martinfowler.com/articles/agileFluency.html
